schema {
  query: QueryRoot
}

type FilterInversionSolution {
  analysis: InversionSolutionAnalysis
}

"""
Represents the internal details of a given solution or filtered solution
"""
type InversionSolutionAnalysis {
  solution_id: ID
  fault_sections: [InversionSolutionFaultSection]
  ruptures: [InversionSolutionRupture]
  geojson: JSONString
  location_geojson: JSONString
}

"""Defines filter arguments for Inversions analysis"""
input InversionSolutionAnalysisArguments {
  """The ID of the InversionSolution"""
  solution_id: ID!

  """
  Optional list of locations codes for proximity filtering e.g. `WLG,PMR,ZQN`
  """
  location_codes: [String]

  """The rupture/location intersection radius in km"""
  radius_km: Int

  """Constrain to ruptures having a annual rate above the value supplied."""
  minimum_rate: Float

  """Constrain to ruptures having a annual rate below the value supplied."""
  maximum_rate: Float

  """Constrain to ruptures having a magnitude above the value supplied."""
  minimum_mag: Float

  """Constrain to ruptures having a magnitude below the value supplied."""
  maximum_mag: Float
}

type InversionSolutionFaultSection {
  """Unique ID of the fault section eg WHV1"""
  fault_id: String
}

type InversionSolutionRupture {
  """Unique ID of the rupture within this solution"""
  fault_id: Int

  """rupture magnitude"""
  magnitude: Float
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type Location {
  """unique location code."""
  code: String

  """location name."""
  name: String

  """location latitude."""
  latitude: Float

  """location longitude"""
  longitude: Float
}

type LocationList {
  """The unique location_list_id"""
  list_id: String

  """list of location codes."""
  location_codes: [String]

  """the locations in this list."""
  locations: [Location]
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""This is the entry point for solvis graphql query operations"""
type QueryRoot {
  node(
    """The ID of the object"""
    id: ID!
  ): Node

  """About this Solvis API """
  about: String
  analyse_solution(input: InversionSolutionAnalysisArguments!): FilterInversionSolution

  """Return ad single radii_set for the id passed in"""
  get_radii_set(
    """the integer ID for the desired radii_set"""
    radii_set_id: Int!
  ): RadiiSet

  """Return all the available radii_set"""
  get_radii_sets: [RadiiSet]

  """Return a single location."""
  get_location(
    """the location code of the desired location"""
    location_code: String!
  ): Location

  """Return all the available locations"""
  get_locations: [Location]

  """Return a single location list."""
  get_location_list(
    """the id of the desired location_list"""
    list_id: String!
  ): LocationList

  """Return all the available location lists"""
  get_location_lists: [LocationList]
}

type RadiiSet {
  """The unique radii_set_id"""
  radii_set_id: Int

  """list of dimension in metres defined by the radii set."""
  radii: [Int]
}

